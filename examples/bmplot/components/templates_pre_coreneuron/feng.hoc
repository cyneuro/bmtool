{load_file("stdrun.hoc")}
{load_file("nrngui.hoc")}

begintemplate Cell_Af

	public soma, dend, apic, connect2target, type,drv, insert_mechs,cclA
	create soma[1], dend[1], apic[1]

	public ncl, synlist,baglist,cclA
	objref ncl, synlist,drv,baglist
	strdef type
	objref tlist, area_vec
	public tlist, area_vec
	external tstop
	
	objref noise_exc, noise_inh, cclA
	objref noiseRandObj_exc, noiseRandObj_inh

	public all, somatic, basal, apical, axonal
        objref all, somatic,axonal,basal,apical

	proc init() {	
		all = new SectionList()
		somatic = new SectionList()
		basal = new SectionList()
		apical = new SectionList()
		
		soma[0] all.append()
		soma[0] somatic.append()
		
		dend[0] all.append()
		dend[0] basal.append()
		apic[0] all.append()
		apic[0] apical.append()
		
		tlist = new List()
		area_vec = new Vector()
		ncl = new List()
		synlist =new List()	
		baglist = new List()
		type = "Cell_A"	

		gUnf_Xsoma = 2.5e-05
		Rm = 80000 // decreased overall
		SpineScale = 1.76371308 //2
		SpineScale_leak = 1.763714578
		Cm = 2.4 // 1.8 // 2 //1
		RaAll= 150//200
		RaSoma= 150 // 146.969697
		RaDend = 150
		RaAxIs = 150//100//200
		Vpas = -72//-65//-70 // -67
		
		
		
		  ////////////////////////////////////////
		 //         Conductance values         //
		////////////////////////////////////////
		
		gna = 0.015 
		gnap = 0.000559 // 0.000551 
		gkdr = 0.002 //0.002 
		ghd = 1.5e-5 //1.5e-5
		gca = 5.5e-4 
		gm = 0.00224 // 0.00222  
		gsAHP = 0.05//0.0019
		gkap = 0.002 
		gleak = 2.5e-5
		gleak_dend=1.57*3.0e-5
			
		nash=10
		Vrest = -70
		celsius = 31.0 
		
		/////// topology ////////
		connect dend[0](0), soma[0](0)
        	connect apic[0](0), soma[0](1)
		
		/////// geometry ////////
		soma[0] {L = 25 diam = 24.75 nseg = 1}		//{L = 20 diam = 20 nseg = 13}
		dend[0] {diam= 3 L=270 nseg=8}     // 3.5
		apic[0] {diam =5 L=555 nseg=7} 
		
		access soma[0]
		//distance()
		
		apic[0] {
			insert cadyn gcabar_cadyn = gca eca = 120
			insert leak el_leak = -72  glbar_leak = gleak_dend Ra=RaDend cm = Cm // 2.5
			insert hd ghdbar_hd = ghd 
			insert na3 sh_na3=nash ar_na3=1	gbar_na3 = gna
			insert nap gbar_nap = 0  gbar_nap(1/(2*nseg)) = 0.8*gnap
			insert kdr gbar_kdr = gkdr
			insert capool taucas = 1000  fcas_capool = 0.05 
			insert sAHP gsAHPbar_sAHP = 0
			insert im gbar_im = 0 gbar_im(1/(2*nseg)) = 0.8*gm
			insert kap gkabar_kap = 0
			//insert xtraimemrec	//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000-555/2
			for (x,0) {
				//print secname(),x,L
				//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000-x*L
				//r = sqrt((x_xtra(x) - $4)^2 + (y_xtra(x) - $5)^2 + (z_xtra(x) - $6)^2)
				//if (r==0) r = diam(x)/2
		        	//rho=1/0.03//35.4
                		//rx_xtra(x) = (rho / 4 / PI)*(1/r)*0.001//0.01
				//print r
			}
								
		}		
		soma[0] {	
			insert cadyn gcabar_cadyn = gca  eca = 120
			insert leak el_leak= -72  glbar_leak = 1.0*gleak   Ra=RaSoma cm = Cm // 2.5
			insert hd ghdbar_hd = ghd 
			insert na3 sh_na3=nash ar_na3=1	gbar_na3 = 3*gna
			insert nap gbar_nap = gnap
			insert kdr gbar_kdr = gkdr
			insert capool taucas = 1000  fcas_capool = 0.05 //only in dend and apic
			insert sAHP gsAHPbar_sAHP = gsAHP
			insert im gbar_im = gm
			insert kap gkabar_kap = gkap
			//insert xtraimemrec	//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000
			for (x,0) {
				//print secname(),x
				//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000
				//r = sqrt((x_xtra(x) - $4)^2 + (y_xtra(x) - $5)^2 + (z_xtra(x) - $6)^2)
				//if (r==0) r = diam(x)/2
		        	//rho=1/0.03//35.4
                		//rx_xtra(x) = (rho / 4 / PI)*(1/r)*0.001//0.01
				//print r
				
				drv = new IClamp(0.5)
				drv.del = 0
				drv.dur = tstop
				drv.amp = 0.0//0.2  //nA
		
			}
		}	
		
		dend[0] {  // need to add Spine Scale
			insert cadyn gcabar_cadyn = gca  eca = 120
			insert leak el_leak= -72  glbar_leak = gleak_dend  Ra=RaAll cm = Cm // 2.5
			insert hd ghdbar_hd = ghd
			insert na3 sh_na3=nash ar_na3=1	gbar_na3 = gna
			insert nap gbar_nap = 0 gbar_nap(1/(2*nseg)) = 1.0*gnap
			insert kdr gbar_kdr = gkdr
			insert capool taucas = 1000  fcas_capool = 0.05 
			insert sAHP gsAHPbar_sAHP = 0
			insert im gbar_im = 0 gbar_im(1/(2*nseg)) = 1.0*gm
			insert kap gkabar_kap = gkap
			//insert xtraimemrec	//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000+270/2
				
			for (x,0) {
				//print secname(),x,L
				//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000+x*L
                		//r = sqrt((x_xtra(x) - $4)^2 + (y_xtra(x) - $5)^2 + (z_xtra(x) - $6)^2)
				//if (r==0) r = diam(x)/2
			        //rho=1/0.03//35.4
                		//rx_xtra(x) = (rho / 4 / PI)*(1/r)*0.001//0.01
               			//print r
			}
		}
				
		
		forall {
			//insert extracellular
			v=Vrest
			ena = 45
			ek = -80
			if (ismembrane("kdr") || ismembrane("kap") || ismembrane("kad")) {ek=-80}
			if (ismembrane("hd") ) {ehd_hd=-45 } // change from -30 to -50
			//for (x, 0) {
			//	setpointer im_xtraimemrec(x), i_membrane(x)
			//	setpointer ex_xtraimemrec(x), e_extracellular(x)
		 	//	tlist.append(new Vector())
        		//	//int_tlist.append(new Vector()) //now int_tlist is necessarily the same length as tlist
        		//	area_vec.append(area(x)) // area_vec.x(i) is area of tlist.o(i)
			//	//print area(x)
        		//	//tlist.o(tlist.count()-1).record(&i_membrane(x),1)
			//	tlist.o(tlist.count()-1).record(&er_xtraimemrec(x),1) //changce recording resolution if needed
			//}
	
		}	
			



		//print x,r
		//r = sqrt((x_xtra(x) - $1)^2 + (y_xtra(x) - $2)^2 + (z_xtra(x) - $3)^2)
        	// 0.01 converts rho's cm to um and ohm to megohm
        	// if electrode is exactly at a node, r will be 0
        	// this would be meaningless since the location would be inside the cell
       		// so force r to be at least as big as local radius
	

	//#insert_mechs(100)	
	define_shape()// builtin fcn: fill in 3d info for sections defined by only L and diam, translate 3d points for consistency with their connections
	}//end init

	proc insert_mechs(){
		r = $1
		soma[0]{
			noiseRandObj_exc=new Random()
                        noiseRandObj_exc.Random123(123)
                        noiseRandObj_exc.normal(0,1)

                        noise_exc = new Gfluct2_exc(0.5)

                        noise_exc.g_e0 = 0.0032
                        noise_exc.g_i0 = 0
                        noise_exc.std_e = 0.003
                        noise_exc.std_i = 0

                        //noise_exc.g_e0 = 0.0032//0.0032
                        //noise_exc.std_e = 0.003//0.003
                        noise_exc.setRandObj(noiseRandObj_exc)

                        noiseRandObj_inh=new Random()
                        noiseRandObj_inh.Random123(123)
                        noiseRandObj_inh.normal(0,1)

                        noise_inh = new Gfluct2_inh(0.5)

                        noise_inh.g_e0 = 0
                        noise_inh.g_i0 = 0.021
                        noise_inh.std_e = 0
                        noise_inh.std_i = 0.008

                        //noise_inh.g_e0 = 0.021
                        //noise_inh.std_e = 0.008
                        noise_inh.setRandObj(noiseRandObj_inh)

		}
	}

	obfunc connect2target() { localobj nc
		soma nc = new NetCon(&v(0.5), $o1)
		nc.threshold = 0
		if (numarg() == 2) ($o2 = nc)
		return nc
	}		
endtemplate Cell_Af

///////////////////////////////////////////////////////////


/////====================/////
///// Type C cell in BL  /////
/////===================/////

begintemplate Cell_Cf
	public soma, dend, apic, connect2target, type,drv, insert_mechs,cclA
	create soma[1], dend[1], apic[1]

	public ncl, synlist,baglist,baglist
	objref ncl, synlist,drv,baglist
	strdef type
	objref tlist, area_vec
	public tlist, area_vec
	external tstop

	objref noise_exc, noise_inh, cclA
	objref noiseRandObj_exc, noiseRandObj_inh

	public all, somatic, basal, apical, axonal
        objref all, somatic,axonal,basal,apical

	proc init() {	
		all = new SectionList()
		somatic = new SectionList()
		basal = new SectionList()
		apical = new SectionList()
		
		soma[0] all.append()
		soma[0] somatic.append()
		
		dend[0] all.append()
		dend[0] basal.append()
		apic[0] all.append()
		apic[0] apical.append()
		
		tlist = new List()
    		area_vec = new Vector()	
	
		ncl = new List()
		synlist =new List()
	        baglist = new List()		
		type = "Cell_C"	

		gUnf_Xsoma = 2.5e-05
		Rm = 80000 // decreased overall
		SpineScale = 1.76371308 //2
		SpineScale_leak = 1.763714578
		Cm = 2.4 // 1.8 // 2 //1
		RaAll= 150//200
		RaSoma= 150 // 146.969697
		RaDend = 150
		RaAxIs = 150//100//200
		Vpas = -72//-65//-70 // -67
		
		
		
		  ////////////////////////////////////////
		 //         Conductance values         //
		////////////////////////////////////////
		
		gna = 0.015
		gnap = 0.000555 // 0.000551 
		gkdr = 0.002//0.002 
		ghd = 1.5e-5//1.5e-5
		gca = 5.5e-4 
		gm = 0.00224 // 0.00222  
		gsAHP = 0.0002//0.0012
		gkap = 0.002 
		gleak = 2.5e-5 
		gleak_dend=1.57*3.0e-5
			
		nash=10
		Vrest = -70
		celsius = 31.0 
		
		/////// topology ////////
		connect dend[0](0), soma[0](0)
        	connect apic[0](0), soma[0](1)
		
		/////// geometry ////////
		soma[0] {L = 25 diam = 24.75 nseg = 1}		//{L = 20 diam = 20 nseg = 13}
		dend[0] {diam= 3 L=270 nseg=8}     // 3.5
		apic[0] {diam =5 L=555 nseg=7} 
		
		access soma[0]
		//distance()
		
		apic[0] {
			insert cadyn gcabar_cadyn = gca eca = 120
			insert leak el_leak = -72  glbar_leak = gleak_dend Ra=RaDend cm = Cm // 2.5
			insert hd ghdbar_hd = ghd 
			insert na3 sh_na3=nash ar_na3=1	gbar_na3 = gna
			insert nap gbar_nap = 0  gbar_nap(1/(2*nseg)) = 0.8*gnap
			insert kdr gbar_kdr = gkdr
			insert capool taucas = 1000  fcas_capool = 0.05 
			insert sAHP gsAHPbar_sAHP = 0
			insert im gbar_im = 0 gbar_im(1/(2*nseg)) = 0.8*gm
			insert kap gkabar_kap = 0
			//insert xtraimemrec	//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000-555/2
			for (x,0) {
				//print secname(),x,L
				//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000-x*L
				//r = sqrt((x_xtra(x) - $4)^2 + (y_xtra(x) - $5)^2 + (z_xtra(x) - $6)^2)
				//r=100
				//if (r==0) r = diam(x)/2
				//rho=1/0.03//35.4
				//rx_xtra(x) = (rho / 4 / PI)*(1/r)*0.001//0.01
				//print r
			}
								
		}		
		soma[0] {	
			insert cadyn gcabar_cadyn = gca  eca = 120
			insert leak el_leak= -72  glbar_leak = 1.0*gleak   Ra=RaSoma cm = Cm // 2.5
			insert hd ghdbar_hd = ghd 
			insert na3 sh_na3=nash ar_na3=1	gbar_na3 = 3*gna
			insert nap gbar_nap = gnap
			insert kdr gbar_kdr = gkdr
			insert capool taucas = 1000  fcas_capool = 0.05 //only in dend and apic
			insert sAHP gsAHPbar_sAHP = gsAHP
			insert im gbar_im = gm
			insert kap gkabar_kap = gkap
			//insert xtraimemrec	//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000
			//for (x,0) {
				//print secname(),x
				//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000
				//r = sqrt((x_xtra(x) - $4)^2 + (y_xtra(x) - $5)^2 + (z_xtra(x) - $6)^2)
				//r=100
				//if (r==0) r = diam(x)/2
				//rho=1/0.03//35.4
				// rx_xtra(x) = (rho / 4 / PI)*(1/r)*0.001//0.01
				//print r
				drv = new IClamp(0.5)
				drv.del = 0
				drv.dur = tstop
				drv.amp = 0.0//0.2  //nA
			//}
		}	
		
		dend[0] {  // need to add Spine Scale
			insert cadyn gcabar_cadyn = gca  eca = 120
			insert leak el_leak= -72  glbar_leak = gleak_dend  Ra=RaAll cm = Cm // 2.5
			insert hd ghdbar_hd = ghd
			insert na3 sh_na3=nash ar_na3=1	gbar_na3 = gna
			insert nap gbar_nap = 0 gbar_nap(1/(2*nseg)) = 1.0*gnap
			insert kdr gbar_kdr = gkdr
			insert capool taucas = 1000  fcas_capool = 0.05 
			insert sAHP gsAHPbar_sAHP = 0
			insert im gbar_im = 0 gbar_im(1/(2*nseg)) = 1.0*gm
			insert kap gkabar_kap = gkap
			//insert xtraimemrec	//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000+270/2
			
			//for (x,0) {
				//print secname(),x,L
				//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000+x*L
				//r = sqrt((x_xtra(x) - $4)^2 + (y_xtra(x) - $5)^2 + (z_xtra(x) - $6)^2)
				//r=100
				//if (r==0) r = diam(x)/2
				//rho=1/0.03//35.4
				//rx_xtra(x) = (rho / 4 / PI)*(1/r)*0.001//0.01
				//print r
			//}
				
		}
		
		forall {
		
			//insert extracellular
			v=Vrest
			ena = 45
			ek = -80
			if (ismembrane("kdr") || ismembrane("kap") || ismembrane("kad")) {ek=-80}
			if (ismembrane("hd") ) {ehd_hd=-45 } // change from -30 to -50
			
			//for (x, 0) {
			//	//print x
			//	setpointer im_xtraimemrec(x), i_membrane(x)
			//	setpointer ex_xtraimemrec(x), e_extracellular(x)
			//	tlist.append(new Vector())
			//	//int_tlist.append(new Vector()) //now int_tlist is necessarily the same length as tlist
			//	area_vec.append(area(x)) // area_vec.x(i) is area of tlist.o(i)
			//	//print area(x)
			//	//tlist.o(tlist.count()-1).record(&i_membrane(x),1)
			//	tlist.o(tlist.count()-1).record(&er_xtraimemrec(x),1)
			//}
			   
		}
	
	//insert_mechs(100)	
	define_shape()// builtin fcn: fill in 3d info for sections defined by only L and diam, translate 3d points for consistency with their connections
	}//end init

	proc insert_mechs(){
		r = $1
		soma[0]{
                        noiseRandObj_exc=new Random()
                        noiseRandObj_exc.Random123(123)
                        noiseRandObj_exc.normal(0,1)

                        noise_exc = new Gfluct2_exc(0.5)

                        noise_exc.g_e0 = 0.0032
                        noise_exc.g_i0 = 0
                        noise_exc.std_e = 0.003
                        noise_exc.std_i = 0

                        //noise_exc.g_e0 = 0.0032//0.0032
                        //noise_exc.std_e = 0.003//0.003
                        noise_exc.setRandObj(noiseRandObj_exc)

                        noiseRandObj_inh=new Random()
                        noiseRandObj_inh.Random123(123)
                        noiseRandObj_inh.normal(0,1)

                        noise_inh = new Gfluct2_inh(0.5)

                        noise_inh.g_e0 = 0
                        noise_inh.g_i0 = 0.021
                        noise_inh.std_e = 0
                        noise_inh.std_i = 0.008

                        //noise_inh.g_e0 = 0.021
                        //noise_inh.std_e = 0.008
                        noise_inh.setRandObj(noiseRandObj_inh)

		}
	}

	obfunc connect2target() { localobj nc
		soma nc = new NetCon(&v(0.5), $o1)
		nc.threshold = 0
		if (numarg() == 2) ($o2 = nc)
		return nc
	}	
endtemplate Cell_Cf


begintemplate InterneuronCellf
	public soma, dend, connect2target, type,connect_gap,LFPtemp_xtra,drv,insert_mechs
	create soma[1], dend[1]

	public ncl, synlist
	objref ncl, synlist,drv
	strdef type

	objref tlist, area_vec
	public tlist, area_vec
	external tstop
	
	objref noise_exc, noise_inh, cclA
	objref noiseRandObj_exc, noiseRandObj_inh

	public all, somatic, basal, apical, axonal
	objref all, somatic,axonal,basal,apical
	proc init() {	


		all = new SectionList()
		somatic = new SectionList()
		basal = new SectionList()
		apical = new SectionList()
		
		soma[0] all.append()
		soma[0] somatic.append()
		
		dend[0] all.append()
		dend[0] basal.append()
		

		tlist = new List()
    		area_vec = new Vector()	
	
		synlist = new List()
		ncl = new List()
		type = "InterneuronCell"

		/////// topology ////////
		connect dend[0](0), soma[0](1)

		/////// geometry ////////
		soma[0] {
			nseg=1
			L=15		// (micrometer)
			diam=15		// (micrometer)
	    	}

		dend[0] {
			nseg=1
			L=150		// (micrometer)
			diam=10		// (micrometer)
		}

		/////// biophysics //////
		soma[0] {
			cm = 1//1		    // (microF/cm2)
			Ra = 150*22.5	// (ohm-cm)
			Rm = 20000	    // (ohm-cm2)
			
			insert leakinter
			glbar_inter_leakinter = 1/Rm // (siemens/cm2)
			el_leakinter = -70	// (mV)

			insert nainter
			insert kdrinter
			drv = new IClamp(0.5)
			drv.del = 0
			drv.dur = tstop
			drv.amp = 0.0//0.2  //nA
		}

		dend[0] {
			cm = 1//1		// (microF/cm2)
			Ra = 150	// (ohm-cm)
			Rm = 20000	// (ohm-cm2)
			
			insert leakinter
			glbar_inter_leakinter = 1/Rm // (siemens/cm2)
			el_leakinter = -70	// (mV)

			insert nainter
			insert kdrinter
		}
		soma[0] {
			ena = 45		// (mV)
			gnabar_nainter = 0.035	// (siemens/cm2)

			ek = -80		// (mV)
			gkdrbar_kdrinter = 0.008 // (siemens/cm2)
			
			
			//insert xtraimemrec	//x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000
		}

		dend[0] {
			ena = 45		// (mV)
			gnabar_nainter = 0.010	// (siemens/cm2)

			ek = -80		// (mV)
			gkdrbar_kdrinter = 0.003 // (siemens/cm2)
			
			insert ca_ion
			eca = 120
			//insert xtraimemrec	
		}
		//forall {
		//	insert extracellular
		//	for (x, 0) {
		//		if (ismembrane("xtraimemrec")) {
		//			//print x
		//			setpointer im_xtraimemrec(x), i_membrane(x)
		//			setpointer ex_xtraimemrec(x), e_extracellular(x)
		//	
		//
	        //    }
	        //}
			   
		//	for (x,0){
		//		tlist.append(new Vector())
		//		area_vec.append(area(x)) // area_vec.x(i) is area of tlist.o(i)
		//		tlist.o(tlist.count()-1).record(&er_xtraimemrec(x),1)//changce recording resolution if needed
		//	}
		//}
	//insert_mechs(100)
	define_shape()// builtin fcn: fill in 3d info for sections defined by only L and diam, translate 3d points for consistency with their connections	
	}//end init

	proc insert_mechs(){
		r = $1
		soma[0]{
			noiseRandObj_exc=new Random()
			noiseRandObj_exc.Random123(123)
			noiseRandObj_exc.normal(0,1)

			soma noise_exc = new Gfluct2_exc(0.5)

			noise_exc.g_e0 = 0.00121
			noise_exc.g_i0 = 0
			noise_exc.std_e = 0.00012
			noise_exc.std_i = 0

			//noise_exc.g_e0 = 0.0032//0.0032
			//noise_exc.std_e = 0.003//0.003
			noise_exc.setRandObj(noiseRandObj_exc)

			noiseRandObj_inh=new Random()
			noiseRandObj_inh.Random123(123)
			noiseRandObj_inh.normal(0,1)

			noise_inh = new Gfluct2_inh(0.5)

			noise_inh.g_e0 = 0
			noise_inh.g_i0 = 0.00573
			noise_inh.std_e = 0
			noise_inh.std_i = 0.00264

			//noise_inh.g_e0 = 0.021
			//noise_inh.std_e = 0.008
			noise_inh.setRandObj(noiseRandObj_inh)
		
		}
	}
	
	

	obfunc connect2target() { localobj nc
		soma nc = new NetCon(&v(0.5), $o1)
		nc.threshold = 0
		if (numarg() == 2) ($o2 = nc)
			return nc
		}
endtemplate InterneuronCellf

